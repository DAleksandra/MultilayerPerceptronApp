// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultilayerPerceptron.API.Data;

namespace MultilayerPerceptron.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200528190010_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.4.20220.10");

            modelBuilder.Entity("MultilayerPerceptron.API.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NetworkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("MultilayerPerceptron.API.Models.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("MultilayerPerceptron.API.Models.Neuron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.ToTable("Neurons");
                });

            modelBuilder.Entity("MultilayerPerceptron.API.Models.ValuePair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NetworkId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.ToTable("ValuePairs");
                });

            modelBuilder.Entity("MultilayerPerceptron.API.Models.Layer", b =>
                {
                    b.HasOne("MultilayerPerceptron.API.Models.Network", "Network")
                        .WithMany("Layers")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultilayerPerceptron.API.Models.Neuron", b =>
                {
                    b.HasOne("MultilayerPerceptron.API.Models.Layer", "Layer")
                        .WithMany("Neurons")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultilayerPerceptron.API.Models.ValuePair", b =>
                {
                    b.HasOne("MultilayerPerceptron.API.Models.Network", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
